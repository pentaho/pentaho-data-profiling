/*******************************************************************************
 *
 * Pentaho Data Profiling
 *
 * Copyright (C) 2002-2015 by Pentaho : http://www.pentaho.com
 *
 *******************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

package org.pentaho.profiling.model.metrics.contributor.percentile;

import com.clearspring.analytics.stream.quantile.TDigest;
import org.pentaho.profiling.api.ValueTypeMetrics;

import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by bryan on 3/11/15.
 */
public class PercentileMetrics implements ValueTypeMetrics {
  private TDigest tDigest;
  private Map<String, Double> percentiles = new HashMap<String, Double>();

  public PercentileMetrics() {
    this( null );
  }

  public PercentileMetrics( TDigest tDigest ) {
    this.tDigest = tDigest;
  }

  public synchronized byte[] getBytes() {
    ByteBuffer byteBuffer = ByteBuffer.allocate( tDigest.byteSize() );
    tDigest.asBytes( byteBuffer );
    byteBuffer.flip();
    byte[] bytes = new byte[ byteBuffer.limit() ];
    byteBuffer.get( bytes );
    return bytes;
  }

  public synchronized void setBytes( byte[] bytes ) {
    ByteBuffer byteBuffer = ByteBuffer.wrap( bytes );
    tDigest = TDigest.fromBytes( byteBuffer );
  }

  public synchronized void add( double x ) {
    tDigest.add( x );
  }

  public synchronized void add( PercentileMetrics other ) {
    tDigest.add( other.tDigest );
  }

  public synchronized void setPercentile( double percentile ) {
    percentiles.put( String.valueOf( percentile ), tDigest.quantile( percentile ) );
  }

  public synchronized Map<String, Double> getPercentiles() {
    return new HashMap<String, Double>( percentiles );
  }

  public synchronized void setPercentiles( Map<String, Double> percentiles ) {
    this.percentiles = new HashMap<String, Double>( percentiles );
  }

  @Override public synchronized Object clone() {
    PercentileMetrics result = new PercentileMetrics();
    if ( tDigest != null ) {
      result.setBytes( getBytes() );
    }
    result.setPercentiles( percentiles );
    return result;
  }

  //OperatorWrap isn't helpful for autogenerated methods
  //CHECKSTYLE:OperatorWrap:OFF

  @Override public boolean equals( Object o ) {
    if ( this == o ) {
      return true;
    }
    if ( o == null || getClass() != o.getClass() ) {
      return false;
    }

    PercentileMetrics that = (PercentileMetrics) o;

    if ( tDigest != null ? !tDigest.equals( that.tDigest ) : that.tDigest != null ) {
      return false;
    }
    return !( percentiles != null ? !percentiles.equals( that.percentiles ) : that.percentiles != null );

  }

  @Override public int hashCode() {
    int result = tDigest != null ? tDigest.hashCode() : 0;
    result = 31 * result + ( percentiles != null ? percentiles.hashCode() : 0 );
    return result;
  }

  @Override public String toString() {
    return "PercentileMetrics{" +
      "tDigest=" + tDigest +
      ", percentiles=" + percentiles +
      '}';
  }
  //CHECKSTYLE:OperatorWrap:ON
}
